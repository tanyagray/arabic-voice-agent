version: '3'

vars:
  VENV_DIR: .venv
  PYTHON: "{{.VENV_DIR}}/bin/python"

tasks:
  # Setup and installation tasks
  install:
    desc: "Install dependencies and set up virtual environment"
    cmds:
      - uv venv {{.VENV_DIR}}
      - uv pip install -r requirements.txt
    sources:
      - requirements.txt
    generates:
      - "{{.VENV_DIR}}/bin/activate"

  # Development tasks
  dev:
    desc: "Run the agent locally in development mode"
    deps: [install, env-check]
    cmds:
      - uv run --env-file .env --directory . python -m src.main dev
    interactive: true
    env:
      PYTHONPATH: "."

  console:
    desc: "Run the agent in console mode"
    deps: [install, env-check]
    cmds:
      - uv run --env-file .env --directory . python -m src.main console
    interactive: true
    env:
      PYTHONPATH: "."

  # Testing and linting
  lint:
    desc: "Run linting checks"
    deps: [install]
    cmds:
      - uv pip install -q ruff || true
      - "{{.VENV_DIR}}/bin/ruff check src/ || true"

  format:
    desc: "Format code with black"
    deps: [install]
    cmds:
      - uv pip install -q black || true
      - "{{.VENV_DIR}}/bin/black src/ || true"

  # Deployment tasks
  deploy:
    desc: "Deploy agent to Render"
    cmds:
      - echo "Deploying to Render..."
      - git push origin main
      - echo "Deployment triggered. Check Render dashboard for status."

  deploy-force:
    desc: "Force deploy agent to Render"
    cmds:
      - echo "Force deploying to Render..."
      - git push --force origin main
      - echo "Force deployment triggered. Check Render dashboard for status."

  # Docker tasks
  docker-build:
    desc: "Build Docker image for the agent"
    cmds:
      - docker build -t arabic-voice-agent:latest .

  docker-run:
    desc: "Run the agent in a Docker container"
    deps: [docker-build]
    cmds:
      - docker run --env-file ../.env arabic-voice-agent:latest
    interactive: true

  # Utility tasks
  clean:
    desc: "Clean up generated files and caches"
    cmds:
      - rm -rf {{.VENV_DIR}}
      - find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
      - find . -type f -name "*.pyc" -delete 2>/dev/null || true
      - echo "Cleanup complete"

  env-check:
    desc: "Check if .env file exists"
    cmds:
      - |
        if [ ! -f ".env" ]; then
          echo "Error: .env file not found in livekit-agent directory"
          echo "Please copy .env.example to .env and fill in your credentials:"
          echo "  cp ../.env.example .env"
          exit 1
        fi
    silent: true

  logs:
    desc: "View agent logs (for deployed version)"
    cmds:
      - echo "View logs on Render dashboard or use 'render logs' CLI command"

  help:
    desc: "Show available tasks"
    cmds:
      - task --list
